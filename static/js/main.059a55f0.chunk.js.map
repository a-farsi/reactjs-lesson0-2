{"version":3,"sources":["Person.js","App.js","serviceWorker.js","index.js"],"names":["Person","props","onClick","click","name","age","type","onChange","changed","value","App","state","persons","id","showPersons","togglePersonHandler","doesShow","setState","deletePersonHandler","personIndex","newPersons","splice","nameChangeHandler","event","findIndex","p","console","log","person","target","otherPersons","this","map","pers","index","key","e","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAiBeA,G,MAfA,SAAAC,GACb,OACE,6BACE,wBAAIC,QAASD,EAAME,OAAnB,4BAC4BF,EAAMG,KADlC,kBACuDH,EAAMI,KAE7D,2BACEC,KAAK,OACLC,SAAUN,EAAMO,QAChBC,MAAOR,EAAMG,UC+DNM,E,2MArEbC,MAAQ,CACNC,QAAS,CACP,CAAEC,GAAI,OAAQT,KAAM,UAAWC,IAAK,IACpC,CAAEQ,GAAI,QAAST,KAAM,UAAWC,IAAK,IACrC,CAAEQ,GAAI,OAAQT,KAAM,SAAUC,IAAK,KAErCS,aAAa,G,EAGfC,oBAAsB,WACpB,IAAMC,EAAW,EAAKL,MAAMG,YAC5B,EAAKG,SAAS,CACZH,aAAcE,K,EAIlBE,oBAAsB,SAAAC,GACpB,IAAMC,EAAU,YAAO,EAAKT,MAAMC,SAClCQ,EAAWC,OAAOF,EAAa,GAC/B,EAAKF,SAAS,CAAEL,QAASQ,K,EAG3BE,kBAAoB,SAACC,EAAOV,GAC1B,IAAMM,EAAc,EAAKR,MAAMC,QAAQY,WAAU,SAAAC,GAC/C,OAAOA,EAAEZ,KAAOA,KAElBa,QAAQC,IAAI,UAAWd,GACvB,IAAMe,EAAM,eAAQ,EAAKjB,MAAMC,QAAQO,IACvCS,EAAOxB,KAAOmB,EAAMM,OAAOpB,MAC3B,IAAMqB,EAAY,YAAO,EAAKnB,MAAMC,SACpCkB,EAAaX,GAAeS,EAC5BF,QAAQC,IAAIG,GACZ,EAAKb,SAAS,CAAEL,QAASkB,IACzBJ,QAAQC,IAAI,EAAKhB,MAAMC,U,wEAGf,IAAD,OACHA,EAAU,KAsBd,OApBImB,KAAKpB,MAAMG,cACbF,EACE,6BACGmB,KAAKpB,MAAMC,QAAQoB,KAAI,SAACC,EAAMC,GAC7B,OACE,kBAAC,EAAD,CACE/B,MAAO,kBAAM,EAAKe,oBAAoBgB,IACtC9B,KAAM6B,EAAK7B,KACXC,IAAK4B,EAAK5B,IACV8B,IAAKF,EAAKpB,GACVL,QAAS,SAAA4B,GACP,EAAKd,kBAAkBc,EAAGH,EAAKpB,YAU3C,yBAAKwB,UAAU,OACb,yDACA,4BAAQnC,QAAS6B,KAAKhB,qBAAtB,kBACCH,O,GAhES0B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.059a55f0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Person = props => {\r\n  return (\r\n    <div>\r\n      <h2 onClick={props.click}>\r\n        I'm a person, my name is {props.name} and my age is {props.age}\r\n      </h2>\r\n      <input\r\n        type=\"text\"\r\n        onChange={props.changed}\r\n        value={props.name}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Person;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Person from \"./Person\";\n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: \"aeze\", name: \"Karouer\", age: 24 },\n      { id: \"dgdaz\", name: \"Pjhsyue\", age: 25 },\n      { id: \"fkjs\", name: \"Xwiayr\", age: 29 }\n    ],\n    showPersons: false\n  };\n\n  togglePersonHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({\n      showPersons: !doesShow\n    });\n  };\n\n  deletePersonHandler = personIndex => {\n    const newPersons = [...this.state.persons];\n    newPersons.splice(personIndex, 1);\n    this.setState({ persons: newPersons });\n  };\n\n  nameChangeHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n    console.log(\"id is: \", id);\n    const person = { ...this.state.persons[personIndex] };\n    person.name = event.target.value;\n    const otherPersons = [...this.state.persons];\n    otherPersons[personIndex] = person;\n    console.log(otherPersons);\n    this.setState({ persons: otherPersons });\n    console.log(this.state.persons);\n  };\n\n  render() {\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = (\n        <div>\n          {this.state.persons.map((pers, index) => {\n            return (\n              <Person\n                click={() => this.deletePersonHandler(index)}\n                name={pers.name}\n                age={pers.age}\n                key={pers.id}\n                changed={e => {\n                  this.nameChangeHandler(e, pers.id);\n                }}\n              ></Person>\n            );\n          })}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>How to use lists in react</h1>\n        <button onClick={this.togglePersonHandler}>toggle persons</button>\n        {persons}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}